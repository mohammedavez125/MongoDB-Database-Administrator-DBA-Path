copy and paste the following command to log in to your Atlas account.
atlas auth login

use the following command to create a MongoDB Atlas cluster in your Atlas project, MDB_EDU. Then follow the instructions in the terminal.
atlas setup --clusterName myAtlasClusterEDU --provider AWS --currentIp --skipSampleData --username myAtlasDBUser --password myatlas-001 | tee atlas_cluster_details.txt

use the following command to load the sample data into the Atlas cluster that you just deployed:
atlas clusters loadSampleData myAtlasClusterEDU

copy and paste the following command to get the connection string for your Atlas cluster. 
atlas clusters connectionStrings describe myAtlasClusterEDU

Copy and paste the following commands to get the connection string and store it in an environment variable.
MY_ATLAS_CONNECTION_STRING=$(atlas clusters connectionStrings describe myAtlasClusterEDU | sed "1 d")
mongosh -u myAtlasDBUser -p myatlas-001 $MY_ATLAS_CONNECTION_STRING

insert(),insertMany()
db.<collection>.insertOne()

find():-
db.<collection>.find(): this will display all documents
find({field:{$eq:<value>}}) 
      or 
find({field:<value>}) [IMPLICIT SYNTAX TO SHORTEN THE LENGTH OF QUERY]

$eq:-Specifies equality condition. The $eq operator matches documents where the value of a field equals the specified value.
db.<collections>.find{ <field>: { $eq: <value> } }

$in:-It allows us to select all documents that have a field value equal to any of the values specified in the array
db.<collections>.find(  {  <field>  :  {  $in  :  <value> ,<value> , ..  }})

!!!The $eq operator selects documents where the field value is equal to a specific value, while the $ne operator selects documents where the field value is not equal to a particular value.

COMPARISION OPERATORS : $gt, $lt, $lte, $gte (greater than, less than, less than equal to, greater than equal to)

QUERY ARRAYS IN DOCUMENTS:

$elemMatch: The $elemMatch operator matches documents that contain an array field with at least one element that matches all the specified query criteria.
{ <field>: { $elemMatch: { <query1>, <query2>, ... } } }

LOGICAL OPERATORS : $and, $or

replaceOne():-
db.collection.replaceOne();
db.collection.replaceOne(filter, replacement, options)

updateOne():-
The `updateOne()` method requires the use of an update operator to update a document, such as `$set`, `$push`, `$pop`, `$unset`, or `$inc`.
db.collection.updateOne(filter, update, options)
(update)$set= adds a new field and value to a document and replaces the value of a field if it already exists ,
(option)upsert {upsert : true} =add if no field is present ,
(update)$push = add value to array.
(update)$inc=This operator increments a field by a specified value .

findAndModify():-
This method has the following form:
db.collection.findAndModify({
    query: <document>,
    sort: <document>,
    remove: <boolean>,
    update: <document or aggregation pipeline>, // Changed in MongoDB 4.2
    new: <boolean>,
    fields: <document>,
    upsert: <boolean>,
    bypassDocumentValidation: <boolean>,
    writeConcern: <document>,
    collation: <document>,
    arrayFilters: [ <filterdocument1>, ... ],
    let: <document> // Added in MongoDB 5.0
});

updateMany():-
This method has the following form:
db.collection.updateMany(
   <filter>,
   <update>,
   {
     upsert: <boolean>,
     writeConcern: <document>,
     collation: <document>,
     arrayFilters: [ <filterdocument1>, ... ],
     hint:  <document|string>        // Available starting in MongoDB 4.2.1
   }
)

deleteOne(),deleteMany():-
db.collection.deleteOne(
   <filter>,
   {
      writeConcern: <document>,
      collation: <document>,
      hint: <document|string>        // Available starting in MongoDB 4.4
   }
)
db.collection.deleteMany(
   <filter>,
   {
      writeConcern: <document>,
      collation: <document>
   }
)


SORTING AND LIMITING:-
