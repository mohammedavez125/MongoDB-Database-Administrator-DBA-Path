AGGREGATION : it is an analysis and summary of data
STAGE : an aggregation operation performed on the data
AGGREGATION PIPELINE : a series of stages completed one at a time in order

Using $match and $group Stages in a MongoDB Aggregation Pipeline
Review the following sections, which show the code for the $match and $group aggregation stages.

$match:- The $match stage filters for documents that match specified conditions. Here's the code for $match:
  $match: {
     "field_name": "value"
  }

$group:- The $group stage groups documents by a group key.
  $group:
    {
      _id: <expression>, // Group key
      <field>: { <accumulator> : <expression> }
    }

$sort:- The $sort stage sorts all input documents and returns them to the pipeline in sorted order. We use 1 to represent ascending order, and -1 to represent descending order.
    $sort: {
        "field_name": 1
    }

$limit:- The $limit stage returns only a specified number of records.
  $limit: <number>

$project:- The $project stage specifies the fields of the output documents. 1 means that the field should be included, and 0 means that the field should be supressed. The field can also be assigned a new value.
    $project: {
        state:1, 
        zip:1,
        population:"$pop",
        _id:0
    }
[_id is included by default]

$set:- The $set stage creates new fields or changes the value of existing fields, and then outputs the documents with the new fields.
    $set: {
        place: {
            $concat:["$city",",","$state"]
        },
        pop:10000
     }
  
$count:-The $count stage creates a new document, with the number of documents at that stage in the aggregation pipeline assigned to the specified field name.
  $count: "total_zips"

$out:-Takes the documents returned by the aggregation pipeline and writes them to a specified collection. Starting in MongoDB 4.4, you can specify the output database.
>The out stage must be the last stage in the pipeline. The out operator lets the aggregation framework return result sets of any size.
WARNING:- $out replaces the specified collection if it exists.
$out stage has the following syntax:
  $out: { db: "<output-db>", coll: "<output-collection>" } 




